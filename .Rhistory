x = pnorm(0.05, 0.1)
help(pnorm)
pnorm(o.1,0.05,(0.1)^2)
pnorm(0.1,0.05,(0.1)^2)
1-pnorm(0.1,0.05,(0.1)^2)
1-pnorm(0.1,0.05,0.1)
pnorm(-0.1,0.05,0.1)
pnorm(.15,0.05,0.1)-pnorm(-.05,0.05,0.1)
qnorm(.01,0.05,0.1)
qnorm(.05,0.05,0.1)
qnorm(.95,0.05,0.1)
qnorm(.99,0.05,0.1)
require(graphics)
dnorm(0) == 1/ sqrt(2*pi)
dnorm(1) == exp(-1/2)/ sqrt(2*pi)
dnorm(1) == 1/ sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow=c(2,1))
plot(function(x) dnorm(x, log=TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add=TRUE, col="red",lwd=2)
mtext("dnorm(x, log=TRUE)", adj=0)
mtext("log(dnorm(x))", col="red", adj=1)
plot(function(x) pnorm(x, log.p=TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add=TRUE, col="red",lwd=2)
mtext("pnorm(x, log=TRUE)", adj=0)
mtext("log(pnorm(x))", col="red", adj=1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
plot(function(x) dnorm(x, log=TRUE), -60, 50,
+      main = "log { Normal density }")
plot(function(x) dnorm(x, log=TRUE), -60, 50, main = "log { Normal density }")
plot(function(x) dnorm(x, 0.05,.1), -60, 50, main = "log { Normal density }")
plot(function(x) dnorm(x, 0.05,.1))
help(plot)
help(point)
help(points)
# Example: risk-return tradeoff
mu.r = 0.02
sd.r = 0.10
x.vals = seq(-3, 3, length=150)*sd.r + mu.r
plot(x.vals, dnorm(x.vals, mean=mu.r, sd=sd.r), type="l", lwd=2,
ylim=c(0, max(dnorm(x.vals, mean=0.01, sd=0.05))),
col="black", xlab="x", ylab="pdf")
points(x.vals, dnorm(x.vals, mean=0.01, sd=0.05), type="l", lwd=2,
col="blue", lty="dotted")
segments(0.02, 0, 0.02, dnorm(0.02, mean=0.02, sd=0.1), lwd=2)
segments(0.01, 0, 0.01, dnorm(0.01, mean=0.01, sd=0.05), lwd=2,
col="blue", lty="dotted")
legend(x="topleft", legend=c("Amazon", "Boeing"), lwd=2,
col=c("black", "blue"), lty=c("solid","dotted"))
plot(function(x) dnorm(x, 0.05,.1))
points(function(x),dnorm(x,.025,.05))
points(function(x) dnorm(x,.025,.05))
points(function(x) dnorm(x,0.025,0.05))
x.vals = seq(-.25,.35)
plot(x.vals, dnorm(x.vals, 0.05, 0.1))points(x.vals, dnorm(x.vals, mean=0.01, sd=0.05), type="l", lwd=2,
+        col="blue", lty="dotted")
plot(x.vals, dnorm(x.vals, 0.05, 0.1))
points(x.vals, dnorm(x.vals, 0.025, 0.05),lty="dotted")
x.vals = seq(-.25,.35,length=150)
plot(x.vals, dnorm(x.vals, 0.05, 0.1))
points(x.vals, dnorm(x.vals, 0.025, 0.05),lty="dotted")
install.packages("devtools")
setwd("~/R/Coursera_Project")
library(shiny)
runApp()
library(shinyApps)
library(shinyapps)
deployApp()
install.packages("devtools")
library("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd("~/R/Coursera_Project/slidyfy")
author('Pitch Presentation')
slidify("index.Rmd")
browsURL("index.Rmd")
browseURL("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish_github(ex-man,DDP_SlidifyProject)
publish_github('ex-man','DDP_SlidifyProject')
publish_github('ex-man','DDP_SlidifyProject')
